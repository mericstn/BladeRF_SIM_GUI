
/** @brief  constant and configuration file
 * @file:   constants.h
 * @author: FDC
 * @todo create constant.h conf.h debug.h
 *
 * @defgroup constants_debug debug option
 * @{
 *  */

#ifndef CONSTANTS_H
#define CONSTANTS_H
//////////////////////////////////////////////
// debug option
//////////////////////////////////////////////
#define XML2LINKED
#ifdef _WIN32
	#undef HACKRFLINKED
#else
	#define HACKRFLINKED
#endif

#define TEST_ADC 0 ///<@brief enable test ADC gain error
#define TEST_HACKRFBUFFER 0 ///<@brief print info for hackRF fifo buffer
#define TEST_BIT 0          ///< print warning when bit Generated is not valid
#define TEST_WORD 0 ///<@brief enable word generation test
#define TEST_PHASE_UPDATE 0
#define PRINT_INIT_PAGE 0
#define TEST_SAT 2  ///<@brief enable print sat used
                    /// >0 => print PRN of sat used
                    /// >1 => print el / az of all sat
#define TEST_NByte 1 ///<@brief enable test if n byte in fifo pull is >0 
#define TEST_SATPOSCONV 0 ///<@brief print debug if satPos do not converge after TEST_SATPOSCONV iteration
                            ///< @note TEST_SATPOSCONV<500
#define LOGTEST 1 ///<@brief enable log debug result in file
#define TEST_NAN 1


/* Constant for read test vectors file*/
#define SIZEOF_NAV_MSG_CHAR 		60
#define SIZEOF_NAV_MSG_TU8			(SIZEOF_NAV_MSG_CHAR/2)
#define SIZEOF_NAV_PAGE_BITS		120
#define SIZEOF_GAL_DATA_K 			14
#define SIZEOF_GAL_DATA_J 			2
#define SIZEOF_GAL_DATA 			(SIZEOF_GAL_DATA_K+SIZEOF_GAL_DATA_J)


/** @}*/

/**@defgroup  constant_conf program option
 *  
 * gal-sdr-sim configuration
 * 
 * @{
 */
/*! \brief Maximum length of a input string (RINEX, motion) */
#define MAX_CHAR (600)
/*! \brief Maximum number of satellites in RINEX file */
#define MAX_SAT (36)
/*! \brief Maximum number of channels we simulate */
#define MAX_CHAN (16)
/*! \brief Maximum number of satellites in Almanac file */
#define MAX_ALMA (36)

/*! \brief elevation  mask for satellite visibility check
 *
 * in radian used @ref R2D for conversion
 */
#define SAT_MASK 4/R2D

/** \brief time (s) between tow randg update 
 * 
 * used in receiverUpdate() in @ref main_loop 
 */
#define DELTA_T 0.1 

/** \brief time between 2 check visible satellite @see upDateFrame() @ingroup upDateThread */
#define UPDATE_SATLIST_TIME 600
#define UPDATE_SATLIST_TIME_TESTVECT 30
/** \brief time between 2 iod update (s)
 * @ingroup upDateThread
 * @see upDateFrame()
    \warning must be a multiple of UPDATE_SATLIST_TIME
 *  \note disable if <0 */
//#define UPDATE_EPH_TIME 3600
#define UPDATE_EPH_TIME 3600
#define MAX_ITERATION 500
///@}
/////////////////////////////////////////////
// galileo signal
////////////////////////////////////////////
/*! \brief GNSS L1/E1 Carrier frequency */
#define CARR_FREQ (1575.42e6)
/*! \brief C/A and INAV code frequency */
#define CODE_FREQ (1.023e6)
#define CARR_TO_CODE (1.0/1540.0)

static const int ccGenMatrix[2][7] = {
    {1, 1, 1, 1, 0, 0, 1},
    {1, 0, 1, 1, 0, 1, 1}
};

/*! \brief Number of subframes */
#define N_SBF 24 // 30 seconds per subframe, 30 sec * 2 = 720 sec (max)



////////////////////////////////////
// physic constants
///////////////////////////////////
#define SECONDS_IN_WEEK 604800.0
#define SECONDS_IN_HALF_WEEK 302400.0
#define SECONDS_IN_DAY 86400.0
#define SECONDS_IN_HOUR 3600.0
#define SECONDS_IN_MINUTE 60.0

// Conventional values employed in GPS ephemeris model (ICD-GPS-200)
// Usable for Galileo also

#define GM_EARTH 3.986005e14
#define OMEGA_EARTH 7.2921151467e-5

#define WGS84_RADIUS 6378137.0
#define WGS84_ECCENTRICITY 0.0818191908426


#define SPEED_OF_LIGHT 299792458.0
#define LAMBDA_L1 0.190293672798365


// Sampling data format
//#define SC08 (8)
//#define SC16 (16)

//#define seuilMin  -5.7074e+003
//#define seuilMax    5.6556e+003

#define MAXBITS (3000) // Maximum bit length



//////////////////////////////////////////////////////
// Time
/////////////////////////////////////////////////////
//#define OFFSET_UNIX_GPS_TIME (3657*24*60*60)
#define GNSS_LEAPSECONDS 18
//////////////////////////////////////////////////////
// Math
/////////////////////////////////////////////////////
/**
 * @brief radian 2 degrÃ©e conversion
 * 
 * R2D = 180/PI
 * rand = deg * R2D
 */
#define R2D 57.2957795131 // = 180/pi
#define PI 3.141592653589793

#define COS_TAB_LENGTH 512
static const int cosTable512[COS_TAB_LENGTH] = {
    250, 250, 250, 250, 250, 249, 249, 249, 249, 248, 248, 248, 247, 247, 246, 245,
    245, 244, 244, 243, 242, 241, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232,
    230, 229, 228, 227, 225, 224, 223, 221, 220, 218, 217, 215, 214, 212, 210, 209,
    207, 205, 204, 202, 200, 198, 196, 194, 192, 190, 188, 186, 184, 182, 180, 178,
    176, 173, 171, 169, 167, 164, 162, 160, 157, 155, 153, 150, 148, 145, 143, 140,
    138, 135, 132, 130, 127, 125, 122, 119, 116, 114, 111, 108, 105, 103, 100, 97,
    94, 91, 89, 86, 83, 80, 77, 74, 71, 68, 65, 62, 59, 56, 53, 50,
    47, 44, 41, 38, 35, 32, 29, 26, 23, 20, 17, 14, 11, 8, 5, 2,
    -2, -5, -8, -11, -14, -17, -20, -23, -26, -29, -32, -35, -38, -41, -44, -47,
    -50, -53, -56, -59, -62, -65, -68, -71, -74, -77, -80, -83, -86, -89, -91, -94,
    -97, -100, -103, -105, -108, -111, -114, -116, -119, -122, -125, -127, -130, -132, -135, -138,
    -140, -143, -145, -148, -150, -153, -155, -157, -160, -162, -164, -167, -169, -171, -173, -176,
    -178, -180, -182, -184, -186, -188, -190, -192, -194, -196, -198, -200, -202, -204, -205, -207,
    -209, -210, -212, -214, -215, -217, -218, -220, -221, -223, -224, -225, -227, -228, -229, -230,
    -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -241, -242, -243, -244, -244, -245,
    -245, -246, -247, -247, -248, -248, -248, -249, -249, -249, -249, -250, -250, -250, -250, -250,
    -250, -250, -250, -250, -250, -249, -249, -249, -249, -248, -248, -248, -247, -247, -246, -245,
    -245, -244, -244, -243, -242, -241, -241, -240, -239, -238, -237, -236, -235, -234, -233, -232,
    -230, -229, -228, -227, -225, -224, -223, -221, -220, -218, -217, -215, -214, -212, -210, -209,
    -207, -205, -204, -202, -200, -198, -196, -194, -192, -190, -188, -186, -184, -182, -180, -178,
    -176, -173, -171, -169, -167, -164, -162, -160, -157, -155, -153, -150, -148, -145, -143, -140,
    -138, -135, -132, -130, -127, -125, -122, -119, -116, -114, -111, -108, -105, -103, -100, -97,
    -94, -91, -89, -86, -83, -80, -77, -74, -71, -68, -65, -62, -59, -56, -53, -50,
    -47, -44, -41, -38, -35, -32, -29, -26, -23, -20, -17, -14, -11, -8, -5, -2,
    2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47,
    50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 91, 94,
    97, 100, 103, 105, 108, 111, 114, 116, 119, 122, 125, 127, 130, 132, 135, 138,
    140, 143, 145, 148, 150, 153, 155, 157, 160, 162, 164, 167, 169, 171, 173, 176,
    178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 205, 207,
    209, 210, 212, 214, 215, 217, 218, 220, 221, 223, 224, 225, 227, 228, 229, 230,
    232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 241, 242, 243, 244, 244, 245,
    245, 246, 247, 247, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 250, 250
};


static const int sinTable512[COS_TAB_LENGTH] = {
    2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47,
    50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 91, 94,
    97, 100, 103, 105, 108, 111, 114, 116, 119, 122, 125, 127, 130, 132, 135, 138,
    140, 143, 145, 148, 150, 153, 155, 157, 160, 162, 164, 167, 169, 171, 173, 176,
    178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 205, 207,
    209, 210, 212, 214, 215, 217, 218, 220, 221, 223, 224, 225, 227, 228, 229, 230,
    232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 241, 242, 243, 244, 244, 245,
    245, 246, 247, 247, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 250, 250,
    250, 250, 250, 250, 250, 249, 249, 249, 249, 248, 248, 248, 247, 247, 246, 245,
    245, 244, 244, 243, 242, 241, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232,
    230, 229, 228, 227, 225, 224, 223, 221, 220, 218, 217, 215, 214, 212, 210, 209,
    207, 205, 204, 202, 200, 198, 196, 194, 192, 190, 188, 186, 184, 182, 180, 178,
    176, 173, 171, 169, 167, 164, 162, 160, 157, 155, 153, 150, 148, 145, 143, 140,
    138, 135, 132, 130, 127, 125, 122, 119, 116, 114, 111, 108, 105, 103, 100, 97,
    94, 91, 89, 86, 83, 80, 77, 74, 71, 68, 65, 62, 59, 56, 53, 50,
    47, 44, 41, 38, 35, 32, 29, 26, 23, 20, 17, 14, 11, 8, 5, 2,
    -2, -5, -8, -11, -14, -17, -20, -23, -26, -29, -32, -35, -38, -41, -44, -47,
    -50, -53, -56, -59, -62, -65, -68, -71, -74, -77, -80, -83, -86, -89, -91, -94,
    -97, -100, -103, -105, -108, -111, -114, -116, -119, -122, -125, -127, -130, -132, -135, -138,
    -140, -143, -145, -148, -150, -153, -155, -157, -160, -162, -164, -167, -169, -171, -173, -176,
    -178, -180, -182, -184, -186, -188, -190, -192, -194, -196, -198, -200, -202, -204, -205, -207,
    -209, -210, -212, -214, -215, -217, -218, -220, -221, -223, -224, -225, -227, -228, -229, -230,
    -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -241, -242, -243, -244, -244, -245,
    -245, -246, -247, -247, -248, -248, -248, -249, -249, -249, -249, -250, -250, -250, -250, -250,
    -250, -250, -250, -250, -250, -249, -249, -249, -249, -248, -248, -248, -247, -247, -246, -245,
    -245, -244, -244, -243, -242, -241, -241, -240, -239, -238, -237, -236, -235, -234, -233, -232,
    -230, -229, -228, -227, -225, -224, -223, -221, -220, -218, -217, -215, -214, -212, -210, -209,
    -207, -205, -204, -202, -200, -198, -196, -194, -192, -190, -188, -186, -184, -182, -180, -178,
    -176, -173, -171, -169, -167, -164, -162, -160, -157, -155, -153, -150, -148, -145, -143, -140,
    -138, -135, -132, -130, -127, -125, -122, -119, -116, -114, -111, -108, -105, -103, -100, -97,
    -94, -91, -89, -86, -83, -80, -77, -74, -71, -68, -65, -62, -59, -56, -53, -50,
    -47, -44, -41, -38, -35, -32, -29, -26, -23, -20, -17, -14, -11, -8, -5, -2
}; 



#define POW2_M5  0.03125
#define POW2_M9 0.001953125
#define POW2_M14 0.00006103515625
#define POW2_M15 0.000030517578125
#define POW2_M16 0.000015258789063
#define POW2_M19 1.907348632812500e-6
#define POW2_M29 1.862645149230957e-9
#define POW2_M31 4.656612873077393e-10
#define POW2_M33 1.164153218269348e-10
#define POW2_M34 5.820766091346741e-11 
#define POW2_M38 3.637978807091713e-12
#define POW2_M43 1.136868377216160e-13
#define POW2_M46 1.421085471520200e-14
#define POW2_M55 2.775557561562891e-17
#define POW2_M59 1.734723475976807e-18

/*
double hann[] = {
0.08,0.080035,0.080139,0.080312,0.080554,0.080866,0.081246,0.081696,0.082215,0.082803,
0.083459,0.084185,0.084979,0.085841,0.086772,0.087771,0.088839,0.089974,0.091177,0.092448,
0.093786,0.095191,0.096663,0.098202,0.099807, 0.10148,0.10322,0.10502,0.10689,0.10882,
0.11082,0.11289,0.11502,0.11721,0.11946,0.12178,0.12416,0.12661,0.12912,0.13169,
0.13432,0.13701,0.13976,0.14257,0.14544,0.14838,0.15137,0.15442,0.15752,0.16069,
0.16391,0.16719,0.17052,0.17392,0.17736,0.18086,0.18442,0.18802,0.19168, 0.1954,
0.19916,0.20298,0.20685,0.21076,0.21473,0.21875,0.22281,0.22692,0.23108,0.23529,
0.23954,0.24384,0.24818,0.25256,0.25699,0.26146,0.26598,0.27053,0.27513,0.27976,
0.28444,0.28915, 0.2939,0.29869,0.30351,0.30837,0.31327, 0.3182,0.32316,0.32815,
0.33318,0.33824,0.34332,0.34844,0.35359,0.35876,0.36397,0.36919,0.37445,0.37973,
0.38503,0.39036,0.39571,0.40108,0.40647,0.41188,0.41731,0.42276,0.42823,0.43371,
0.43921,0.44473,0.45026, 0.4558,0.46136,0.46693, 0.4725,0.47809,0.48369, 0.4893,
0.49491,0.50053,0.50616,0.51179,0.51743,0.52307,0.52871,0.53436,0.54,0.54564,
0.55129,0.55693,0.56257,0.56821,0.57384,0.57947,0.58509, 0.5907,0.59631,0.60191,
0.6075,0.61307,0.61864, 0.6242,0.62974,0.63527,0.64079,0.64629,0.65177,0.65724,
0.66269,0.66812,0.67353,0.67892,0.68429,0.68964,0.69497,0.70027,0.70555,0.71081,
0.71603,0.72124,0.72641,0.73156,0.73668,0.74176,0.74682,0.75185,0.75684,0.7618,
0.76673,0.77163,0.77649,0.78131,0.7861,0.79085,0.79556,0.80024,0.80487,0.80947,
0.81402,0.81854,0.82301,0.82744,0.83182,0.83616,0.84046,0.84471,0.84892,0.85308,
0.85719,0.86125,0.86527,0.86924,0.87315,0.87702,0.88084,0.8846,0.88832,0.89198,
0.89558,0.89914,0.90264,0.90608,0.90948,0.91281,0.91609,0.91931,0.92248,0.92558,
0.92863,0.93162,0.93456,0.93743,0.94024,0.94299,0.94568,0.94831,0.95088,0.95339,
0.95584,0.95822,0.96054,0.96279,0.96498,0.96711,0.96918,0.97118,0.97311,0.97498,
0.97678,0.97852,0.98019,0.9818,0.98334,0.98481,0.98621,0.98755,0.98882,0.99003,
0.99116,0.99223,0.99323,0.99416,0.99502,0.99582,0.99654,0.9972,0.99778,0.9983,
0.99875,0.99913,0.99945,0.99969,0.99986,0.99997,1,0.99997,0.99986,0.99969,
0.99945,0.99913,0.99875,0.9983,0.99778,0.9972,0.99654,0.99582,0.99502,0.99416,
0.99323,0.99223,0.99116,0.99003,0.98882,0.98755,0.98621,0.98481,0.98334,0.9818,
0.98019,0.97852,0.97678,0.97498,0.97311,0.97118,0.96918,0.96711,0.96498,0.96279,
0.96054,0.95822,0.95584,0.95339,0.95088,0.94831,0.94568,0.94299,0.94024,0.93743,
0.93456,0.93162,0.92863,0.92558,0.92248,0.91931,0.91609,0.91281,0.90948,0.90608,
0.90264,0.89914,0.89558,0.89198,0.88832,0.8846,0.88084,0.87702,0.87315,0.86924,
0.86527,0.86125,0.85719,0.85308,0.84892,0.84471,0.84046,0.83616,0.83182,0.82744,
0.82301,0.81854,0.81402,0.80947,0.80487,0.80024,0.79556,0.79085,0.7861,0.78131,
0.77649,0.77163,0.76673,0.7618,0.75684,0.75185,0.74682,0.74176,0.73668,0.73156,
0.72641,0.72124,0.71603,0.71081,0.70555,0.70027,0.69497,0.68964,0.68429,0.67892,
0.67353,0.66812,0.66269,0.65724,0.65177,0.64629,0.64079,0.63527,0.62974,0.6242,
0.61864,0.61307,0.6075,0.60191,0.59631,0.5907,0.58509,0.57947,0.57384,0.56821,
0.56257,0.55693,0.55129,0.54564,0.54,0.53436,0.52871,0.52307,0.51743,0.51179,
0.50616,0.50053,0.49491,0.4893,0.48369,0.47809,0.4725,0.46693,0.46136,0.4558,
0.45026,0.44473,0.43921,0.43371,0.42823,0.42276,0.41731,0.41188,0.40647,
0.40108,0.39571,0.39036,0.38503,0.37973,0.37445,0.36919,0.36397,0.35876,
0.35359,0.34844,0.34332,0.33824,0.33318,0.32815,0.32316,0.3182,0.31327,
0.30837,0.30351,0.29869,0.2939,0.28915,0.28444,0.27976,0.27513,0.27053,
0.26598,0.26146,0.25699,0.25256,0.24818,0.24384,0.23954,0.23529,0.23108,
0.22692,0.22281,0.21875,0.21473,0.21076,0.20685,0.20298,0.19916,0.1954,
0.19168,0.18802,0.18442,0.18086,0.17736,0.17392,0.17052,0.16719,0.16391,
0.16069,0.15752,0.15442,0.15137,0.14838,0.14544,0.14257,0.13976,0.13701,
0.13432,0.13169,0.12912,0.12661,0.12416,0.12178,0.11946,0.11721,0.11502,
0.11289,0.11082,0.10882,0.10689,0.10502,0.10322,0.10148,0.099807,0.098202,
0.096663,0.095191,0.093786,0.092448,0.091177,0.089974,0.088839,0.087771,
0.086772,0.085841,0.084979,0.084185,0.083459,0.082803,0.082215,0.081696,
0.081246,0.080866,0.080554,0.080312,0.080139,0.080035
};*/


#endif /* CONSTANTS_H */

